{% import "autoAPI/config" %}
{% func KubernetesFile(config config.Config) %}
kind: Deployment
metadata:
  name: {%v config.Database.Table.Name.KebabCase() %}
  {% if config.K8s.Namespace != nil -%}namespace: {%v *config.K8s.Namespace %}{% endif %}
  labels:
    app: {%v config.Database.Table.Name.KebabCase() %}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {%v config.Database.Table.Name.KebabCase() %}
    spec:
      containers:
        - name: {%v config.Database.Table.Name.KebabCase() %}
          image: {%v *config.Docker.Username %}/{%v config.Database.Table.Name.KebabCase() %}:{%v *config.Docker.Tag %}
          ports:
            - containerPort: 8000
          env:
            - name: DB_ADDRESS
              value: "{%v *config.Database.URL %}"
---
apiVersion: v1
kind: Service
metadata:
  name: {%v config.Database.Table.Name.KebabCase() %}-svc
  {%- if config.K8s.Namespace != nil -%}namespace: {%v *config.K8s.Namespace %}{%- endif -%}
spec:
  selector:
    app: {%v config.Database.Table.Name.KebabCase() %}
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
{% if config.K8s.Host != nil && config.K8s.Uri != nil %}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {%v config.Database.Table.Name.KebabCase() %}-ingress
  {%- if config.K8s.Namespace != nil -%}namespace: {%v *config.K8s.Namespace %}{%- endif -%}
spec:
  rules:
  - host: {%v *config.K8s.Host %}
    http:
      paths:
      - path: {%v *config.K8s.Uri %}
        backend:
          serviceName: {%v config.Database.Table.Name.KebabCase() %}-svc
          servicePort: 8000
{% endif %}
{% endfunc %}
