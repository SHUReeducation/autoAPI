{% import "autoAPI/configFile" %}
{% import importGenerator "autoAPI/generator/apiGenerator/golang/importGenerator" %}
{% import typeTransformer "autoAPI/generator/apiGenerator/golang/typeTransformer" %}

{% func Model(configFile configFile.ConfigFile) %}
package model

import (
     "{%v configFile.Database.Table.Name.CamelCase() %}/infrastructure"
     {% if importGenerator.ImportGenerator.Generate(configFile) != nil %}{% for _, extra := range importGenerator.ImportGenerator.Generate(configFile) %}"{%s extra %}"
     {% endfor %}{% endif %}
)

type {%v configFile.Database.Table.Name.PascalCase() %} struct {
    Id int64 `json:"id"`
    {% for _, field := range configFile.Database.Table.Fields %}{%v field.Name.PascalCase() %} {%s typeTransformer.TypeTransformer.Transform(field.Type) %} `json:"{%v field.Name.SnakeCase() %}"`
    {% endfor %}
}

func Create(object {%v configFile.Database.Table.Name.PascalCase() %}) ({%v configFile.Database.Table.Name.PascalCase() %}, error) {
    row := infrastructure.DB.QueryRow(`
    INSERT INTO {%v configFile.Database.Table.Name.PascalCase() %}(id, {% for i, field := range configFile.Database.Table.Fields %}{%v field.Name.SnakeCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    VALUES ($1, {% for i := range configFile.Database.Table.Fields %}${%d (i+2) %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %}) RETURNING id;`, object.Id, {% for i, field := range configFile.Database.Table.Fields %}object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    err := row.Scan(&object.Id)
    return object, err
}

func Get(id int64) ({%v configFile.Database.Table.Name.PascalCase() %}, error) {
    row := infrastructure.DB.QueryRow(`
		SELECT {% for i, field := range configFile.Database.Table.Fields %}{%v field.Name.SnakeCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %}
		FROM {%v configFile.Database.Table.Name.SnakeCase() %} WHERE id=$1;`, id)
    object := {%v configFile.Database.Table.Name.PascalCase() %} { Id: id }
    err := row.Scan({% for i, field := range configFile.Database.Table.Fields %}&object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    return object, err
}

func Scan(offset uint64, limit uint64) ([]{%v configFile.Database.Table.Name.PascalCase() %}, error) {
    rows, err := infrastructure.DB.Query(`
        SELECT id, {% for i, field := range configFile.Database.Table.Fields %}{%v field.Name.SnakeCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %}
        FROM {%v configFile.Database.Table.Name.SnakeCase() %}
        LIMIT $1 OFFSET $2;`, limit, offset)
    if err != nil {
        return nil, err
    }
    var result []{%v configFile.Database.Table.Name.PascalCase() %}
    for rows.Next() {
        var scanned {%v configFile.Database.Table.Name.PascalCase() %}
        err := rows.Scan(&scanned.Id, {% for i, field := range configFile.Database.Table.Fields %} &scanned.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
        if err != nil {
            return result, err
        }
        result = append(result, scanned)
    }
    return result, nil
}

func Put(object {%v configFile.Database.Table.Name.PascalCase() %}) ({%v configFile.Database.Table.Name.PascalCase() %}, error) {
    row := infrastructure.DB.QueryRow(`
        UPDATE {%v configFile.Database.Table.Name.SnakeCase() %}
        SET {% for i, field := range configFile.Database.Table.Fields %}{%v field.Name.SnakeCase() %}=${%d i + 2 %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %}
        WHERE id=$1
        RETURNING id{% for _, field := range configFile.Database.Table.Fields %}, {%v field.Name.SnakeCase() %}{% endfor %};
        `, object.Id, {% for i, field := range configFile.Database.Table.Fields %}object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    err := row.Scan(&object.Id, {% for i, field := range configFile.Database.Table.Fields %}&object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    return object, err
}

func Delete(id int64) error {
    _, err := infrastructure.DB.Exec(`
        DELETE FROM {%v configFile.Database.Table.Name.SnakeCase() %} WHERE id=$1;
        `, id)
    return err
}

{% for _, complex := range configFile.Database.Table.Complex %}
type {%v complex.Name.PascalCase() %} struct {
    {% for _, field := range complex.Result.Fields %}{%v field.Name.PascalCase() %} {%s typeTransformer.TypeTransformer.Transform(field.Type) %} `json:"{%v field.Name.SnakeCase() %}"`
    {% endfor %}
}

{% if complex.UseForeignKey() %}
func ({%v configFile.Database.Table.Name.CamelCase() %} *{%v configFile.Database.Table.Name.PascalCase() %}) {%v complex.Name.PascalCase() %}({%- for _, param := range complex.Params -%}{%- if param != *complex.ForeignKey() -%}{%v param.Name.CamelCase() %} {%s typeTransformer.TypeTransformer.Transform(param.Type) %}, {% endif -%}{%- endfor -%}{%- if complex.Result.Array -%} offset uint64, limit uint64{%- endif -%}
) ({% if complex.Result.Array %}[]{% endif %}{%v complex.Name.PascalCase() %}, error)  {
{%- if complex.Result.Array -%}
    rows, err := infrastructure.DB.Query(`{%v= complex.SQL %}
        LIMIT ${%v len(complex.Params) %}
        OFFSET ${%v len(complex.Params) + 1 %};`, {% for _, param := range complex.Params -%}{%- if param.Name != nil -%}{%-v param.Name.CamelCase() -%}{%- else -%}{%-v configFile.Database.Table.Name.CamelCase() %}.{%v param.OnThis.PascalCase() -%}{%- endif -%}, {% endfor -%}limit, offset)
    if err != nil {
        return nil, err
    }
    var result []{%v complex.Name.PascalCase() %}
    for rows.Next() {
        var scanned {%v complex.Name.PascalCase() %}
        err := rows.Scan({% for i, field := range complex.Result.Fields %}&scanned.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
        if err != nil {
            return result, err
        }
        result = append(result, scanned)
    }
    return result, nil
{%- else -%}
    row := infrastructure.DB.QueryRow(`{%v= complex.SQL %};`, {%- for _, param := range complex.Params -%}{%- if param.Name != nil -%}{%-v param.Name.CamelCase() -%}{%- else -%}{%-v configFile.Database.Table.Name.CamelCase() %}.{%v param.OnThis.PascalCase() -%}{%- endif -%},{%- endfor -%})
    var object {%v complex.Name.PascalCase() %}
    err := row.Scan({% for i, field := range complex.Result.Fields %}&object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    return object, err
{%- endif -%}
}
{% else %}
func Get{%v complex.Name.PascalCase() %}({%- for _, param := range complex.Params -%}{%v param.Name.CamelCase() %} {%s typeTransformer.TypeTransformer.Transform(param.Type) %}, {%- endfor -%}{%- if complex.Result.Array -%} offset uint64, limit uint64{%- endif -%}
) ({% if complex.Result.Array %}[]{% endif %}{%v complex.Name.PascalCase() %}, error)  {
{%- if complex.Result.Array -%}
    rows, err := infrastructure.DB.Query(`{%v= complex.SQL %}
        LIMIT ${%v len(complex.Params) + 1 %}
        OFFSET ${%v len(complex.Params) + 2 %};`, {% for _, param := range complex.Params -%}{%-v param.Name.CamelCase() -%}, {% endfor -%}limit, offset)
    if err != nil {
        return nil, err
    }
    var result []{%v complex.Name.PascalCase() %}
    for rows.Next() {
        var scanned {%v complex.Name.PascalCase() %}
        err := rows.Scan({% for i, field := range complex.Result.Fields %}&scanned.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
        if err != nil {
            return result, err
        }
        result = append(result, scanned)
    }
    return result, nil
{%- else -%}
    row := infrastructure.DB.QueryRow(`{%v= complex.SQL %};`, {%- for _, param := range complex.Params -%}{%-v param.Name.CamelCase() -%}, {%- endfor -%})
    var object {%v complex.Name.PascalCase() %}
    err := row.Scan({% for i, field := range complex.Result.Fields %}&object.{%v field.Name.PascalCase() %}{% if i + 1 < len(configFile.Database.Table.Fields) %}, {% endif %}{% endfor %})
    return object, err
{%- endif -%}
}
{% endif %}
{% endfor %}
{% endfunc %}
